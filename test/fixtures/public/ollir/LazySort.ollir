LazySort extends QuickSort {

	.construct LazySort().V {

		invokespecial (this, "<init>").V;

		}

	.method public static main(a.array.String).V {

		L.array.i32 :=.array.i32 new(array, 10.i32).array.i32;

		i.i32 :=.i32 0.i32;

		Loop1:

		ti0.i32 :=.i32 arraylength(L.array.i32).i32;

		ui1.i32 :=.i32 ti0.i32;

		if ( i.i32 <.i32 ui1.i32) goto Body1;

		goto EndLoop1;

		Body1:

		ti2.i32:=.i32 i.i32;

		ti3.i32 :=.i32 arraylength(L.array.i32).i32;

		ti4.i32 :=.i32 ti3.i32;

		L[ti2.i32].i32 :=.i32 ti4.i32 -.i32 i.i32;

		i.i32 :=.i32 i.i32 +.i32 1.i32;

		goto Loop1;

		EndLoop1:

		ti5.LazySort :=.LazySort new (LazySort).LazySort;

		invokespecial (ti5.LazySort,"<init>").V;

		q.LazySort :=.LazySort ti5.LazySort;

		ti6.array.i32 :=.array.i32 L.array.i32;

		invokevirtual (q.LazySort,"quicksort", ti6.array.i32).bool;

		invokestatic (QuickSort, "printL", L.array.i32).bool;

		ti8.array.i32 :=.array.i32 L.array.i32;

		tb9.bool :=.bool invokestatic (QuickSort,"printL", ti8.array.i32).bool;

		d.bool :=.bool tb9.bool;

		ret.V;

		}

	.method public quicksort(L.array.i32).bool {

		ti1.i32 :=.i32 invokestatic (MathUtils, "random", 0.i32, 5.i32).i32;

		rand.i32 :=.i32 ti1.i32;

		if ( rand.i32 <.i32 4.i32 ) goto bodyIf0;

		lazy.bool :=.bool 0.bool;

		goto endif0;

		bodyIf0:

		tb2.bool :=.bool  invokevirtual (this,"beLazy",$1.L.array.i32).bool;

		lazy.bool :=.bool 1.bool;

		endif0:

		if ( lazy.bool &&.bool 1.bool ) goto bodyIf1;

		ti3.i32 :=.i32 arraylength($1.L.array.i32).i32;

		ti4.i32 :=.i32 ti3.i32;

		ti5.i32 :=.i32 ti4.i32 -.i32 1.i32;

		ti6.i32 :=.i32  invokevirtual (this,"quicksort",$1.L.array.i32,0.i32,ti5.i32).i32;

		tb7.bool :=.bool ti6.i32;

		lazy.bool :=.bool tb7.bool;

		goto endif1;

		bodyIf1:

		lazy.bool :=.bool lazy.bool !.bool lazy.bool;

		endif1:

		tb8.bool :=.bool lazy.bool;

		ret.bool tb8.bool;

		}

	.method public beLazy(L.array.i32).bool {

		ti0.i32 :=.i32 arraylength($1.L.array.i32).i32;

		ti1.i32 :=.i32 ti0.i32;

		_allowedNameL.i32 :=.i32 ti1.i32;

		_allowedNameI.i32 :=.i32 0.i32;

		Loop2:

		ui2.i32 :=.i32 _allowedNameL.i32 /.i32 2.i32;

		if ( _allowedNameI.i32 <.i32 ui2.i32) goto Body2;

		goto EndLoop2;

		Body2:

		ti3.i32:=.i32 _allowedNameI.i32;

		ti5.i32 :=.i32 invokestatic (MathUtils, "random", 0.i32, 10.i32).i32;

		$1.L[ti3.i32].i32 :=.i32 ti5.i32;

		_allowedNameI.i32 :=.i32 _allowedNameI.i32 +.i32 1.i32;

		goto Loop2;

		EndLoop2:

		Loop3:

		if ( _allowedNameI.i32 <.i32 _allowedNameL.i32) goto Body3;

		goto EndLoop3;

		Body3:

		ti7.i32 :=.i32 invokestatic (MathUtils, "random", 0.i32, 10.i32).i32;

		rand.i32 :=.i32 ti7.i32;

		ti8.i32:=.i32 _allowedNameI.i32;

		$1.L[ti8.i32].i32 :=.i32 rand.i32 +.i32 1.i32;

		_allowedNameI.i32 :=.i32 _allowedNameI.i32 +.i32 1.i32;

		goto Loop3;

		EndLoop3:

		tb9.bool :=.bool 1.bool;

		ret.bool tb9.bool;

		}

	}
