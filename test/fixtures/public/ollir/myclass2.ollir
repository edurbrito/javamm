myClass {
	.construct myClass().V {
		invokespecial(this, "<init>").V;
	}
	
	.method public sum(A.array.i32, B.array.i32).array.i32 {
		t1.i32 :=.i32 arraylength($1.A.array.i32).i32;
		C.array.i32 :=.array.i32 new(array, t1.i32).array.i32;
		i.i32 :=.i32 0.i32;
		
		Loop:
			t1.i32 :=.i32 arraylength($1.A.array.i32).i32;
			if (i.i32 >=.i32 t1.i32) goto End;
			
			t2.i32 :=.i32 $1.A[i.i32].i32;
			t3.i32 :=.i32 $2.B[i.i32].i32;
			t4.i32 :=.i32 t2.i32 +.i32 t3.i32;
			C[i.i32].i32 :=.i32 t4.i32;
			i.i32 :=.i32 i.i32 +.i32 1.i32;
			goto Loop;
		End:
			ret.array.i32 C.array.i32;
	}

    .method public static main(args.array.String).V {
        aux1.myClass :=.myClass new(myClass).myClass;
        invokespecial(aux1.myClass,"<init>").V;

        A.array.i32 :=.array.i32 new(array, 2.i32).array.i32;
        B.array.i32 :=.array.i32 new(array, 2.i32).array.i32;
        t0.i32 :=.i32 0.i32;
        t1.i32 :=.i32 1.i32;
        A[t0.i32].i32 :=.i32 1.i32;
        A[t1.i32].i32 :=.i32 2.i32;
        B[t0.i32].i32 :=.i32 4.i32;
        B[t1.i32].i32 :=.i32 5.i32;

        t2.array.i32 :=.array.i32 invokevirtual(aux1.myClass, "sum", A.array.i32, B.array.i32).array.i32;

        l.i32 :=.i32 arraylength(t2.array.i32).i32;
        l.i32 :=.i32 l.i32 -.i32 1.i32;

        Loop:
            if (l.i32 <.i32 0.i32) goto End;
            t3.i32 :=.i32 t2[l.i32].i32;
            invokestatic(io, "println", t3.i32).V;
			l.i32 :=.i32 l.i32 -.i32 1.i32;
			goto Loop;
		End:

        ret.V;
    }
}