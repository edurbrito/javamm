QuickSort  {

	.construct QuickSort().V {

		invokespecial (this, "<init>").V;

		}

	.method public static main(a.array.String).V {

		L.array.i32 :=.array.i32 new(array, 10.i32).array.i32;

		i.i32 :=.i32 0.i32;

		Loop1:

		ti0.i32 :=.i32 arraylength(L.array.i32).i32;

		ui1.i32 :=.i32 ti0.i32;

		if ( i.i32 <.i32 ui1.i32) goto Body1;

		goto EndLoop1;

		Body1:

		ti2.i32:=.i32 i.i32;

		ti3.i32 :=.i32 arraylength(L.array.i32).i32;

		ti4.i32 :=.i32 ti3.i32;

		L[ti2.i32].i32 :=.i32 ti4.i32 -.i32 i.i32;

		i.i32 :=.i32 i.i32 +.i32 1.i32;

		goto Loop1;

		EndLoop1:

		ti5.QuickSort :=.QuickSort new (QuickSort).QuickSort;

		invokespecial (ti5.QuickSort,"<init>").V;

		q.QuickSort :=.QuickSort ti5.QuickSort;

		ti6.array.i32 :=.array.i32 L.array.i32;

		invokevirtual (q.QuickSort,"quicksort", ti6.array.i32).bool;

		ti7.array.i32 :=.array.i32 L.array.i32;

		invokestatic (QuickSort,"printL", ti7.array.i32).bool;

		ret.V;

		}

	.method static public printL(L.array.i32).bool {

		i.i32 :=.i32 0.i32;

		Loop2:

		ti0.i32 :=.i32 arraylength($1.L.array.i32).i32;

		ui1.i32 :=.i32 ti0.i32;

		if ( i.i32 <.i32 ui1.i32) goto Body2;

		goto EndLoop2;

		Body2:

		ti3.i32 :=.i32 i.i32;

		ti4.i32 :=.i32 $1.L[ti3.i32].i32;

		invokestatic (io, "println", ti4.i32).V;

		i.i32 :=.i32 i.i32 +.i32 1.i32;

		goto Loop2;

		EndLoop2:

		tb5.bool :=.bool 1.bool;

		ret.bool tb5.bool;

		}

	.method public quicksort(L.array.i32).bool {

		ti0.i32 :=.i32 arraylength($1.L.array.i32).i32;

		ti1.i32 :=.i32 ti0.i32;

		ti2.i32 :=.i32 ti1.i32 -.i32 1.i32;

		ti3.i32 :=.i32  invokevirtual (this,"quicksort",$1.L.array.i32,0.i32,ti2.i32).i32;

		tb4.bool :=.bool ti3.i32;

		ret.bool tb4.bool;

		}

	.method public quicksort(L.array.i32,lo.i32,hi.i32).i32 {

		if ( $2.lo.i32 <.i32 $3.hi.i32 ) goto bodyIf0;

		goto endif0;

		bodyIf0:

		ti0.i32 :=.i32  invokevirtual (this,"partition",$1.L.array.i32,$2.lo.i32,$3.hi.i32).i32;

		ti1.i32 :=.i32 ti0.i32;

		p.i32 :=.i32 ti1.i32;

		ti2.i32 :=.i32 p.i32 -.i32 1.i32;

		ti3.i32 :=.i32  invokevirtual (this,"quicksort",$1.L.array.i32,$2.lo.i32,ti2.i32).i32;

		ti4.i32 :=.i32 p.i32 +.i32 1.i32;

		ti5.i32 :=.i32  invokevirtual (this,"quicksort",$1.L.array.i32,ti4.i32,$3.hi.i32).i32;

		endif0:

		ti6.i32 :=.i32 1.bool;

		ret.i32 ti6.i32;

		}

	.method public partition(L.array.i32,lo.i32,hi.i32).i32 {

		ti0.i32 :=.i32 L[$3.hi.i32].i32;

		p.i32 :=.i32 ti0.i32;

		i.i32 :=.i32 $2.lo.i32;

		j.i32 :=.i32 $2.lo.i32;

		Loop3:

		if ( j.i32 <.i32 $3.hi.i32) goto Body3;

		goto EndLoop3;

		Body3:

		ti1.i32 :=.i32 L[j.i32].i32;

		if ( ti1.i32 <.i32 p.i32 ) goto bodyIf1;

		goto endif1;

		bodyIf1:

		ti2.i32 :=.i32 L[i.i32].i32;

		tmp.i32 :=.i32 ti2.i32;

		ti3.i32:=.i32 i.i32;

		ti4.i32 :=.i32 L[j.i32].i32;

		$1.L[ti3.i32].i32 :=.i32 ti4.i32;

		ti5.i32:=.i32 j.i32;

		$1.L[ti5.i32].i32 :=.i32 tmp.i32;

		i.i32 :=.i32 i.i32 +.i32 1.i32;

		endif1:

		j.i32 :=.i32 j.i32 +.i32 1.i32;

		goto Loop3;

		EndLoop3:

		ti6.i32 :=.i32 L[i.i32].i32;

		tmp.i32 :=.i32 ti6.i32;

		ti7.i32:=.i32 i.i32;

		ti8.i32 :=.i32 L[$3.hi.i32].i32;

		$1.L[ti7.i32].i32 :=.i32 ti8.i32;

		ti9.i32:=.i32 $3.hi.i32;

		$1.L[ti9.i32].i32 :=.i32 tmp.i32;

		ti10.i32 :=.i32 i.i32;

		ret.i32 ti10.i32;

		}

	}