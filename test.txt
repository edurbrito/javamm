TicTacToe  {

	.field private row0.array.i32;

	.field private row1.array.i32;

	.field private row2.array.i32;

	.field private whoseturn.i32;

	.field private movesmade.i32;

	.field private pieces.array.i32;

	.construct TicTacToe().V {

		invokespecial (this, "<init>").V;

		}

	.method public init().bool {

		ti1.array.i32 :=.array.i32 new(array, 3.i32).array.i32;

		ti3.array.i32 :=.array.i32 new(array, 3.i32).array.i32;

		ti5.array.i32 :=.array.i32 new(array, 3.i32).array.i32;

		ti7.array.i32 :=.array.i32 new(array, 2.i32).array.i32;

		ti8.i32:=.i32 0.i32;

		ti9.i32 :=.i32 getfield(this, pieces.i32).i32;

		ti10.i32 :=.i32 ti9[ti8.i32].i32;

		ti11.i32:=.i32 1.i32;

		ti12.i32 :=.i32 getfield(this, pieces.i32).i32;

		ti13.i32 :=.i32 ti12[ti11.i32].i32;

		tb16.bool :=.bool 1.bool;

		ret.bool tb16.bool;

		}

	.method public getRow0().i32 {

		ti0.array.i32 :=.array.i32 getfield(this, row0.array.i32).array.i32;

		ti1.i32 :=.i32 ti0.array.i32;

		ret.i32 ti1.i32;

		}

	.method public getRow1().i32 {

		ti0.array.i32 :=.array.i32 getfield(this, row1.array.i32).array.i32;

		ti1.i32 :=.i32 ti0.array.i32;

		ret.i32 ti1.i32;

		}

	.method public getRow2().i32 {

		ti0.array.i32 :=.array.i32 getfield(this, row2.array.i32).array.i32;

		ti1.i32 :=.i32 ti0.array.i32;

		ret.i32 ti1.i32;

		}

	.method public MoveRow(row.array.i32,column.i32).bool {

		if ( $2.column.i32 <.i32 0.i32 ) goto bodyIf0;

		if ( 2.i32 <.i32 $2.column.i32 ) goto bodyIf1;

		ui0.i32 :=.i32 row[$2.column.i32].i32;

		if ( 0.i32 <.i32 ui0.i32 ) goto bodyIf2;

		ti1.i32:=.i32 $2.column.i32;

		ti2.i32 :=.i32 getfield(this, whoseturn.i32).i32;

		ti3.array.i32 :=.array.i32 pieces[ti2.i32 ].i32;

		$1.row[ti1.i32].i32 :=.array.i32 ti3.array.i32;

		ti5.i32 :=.i32 getfield(this, movesmade.i32).i32;

		ti5.i32 :=.i32 getfield(this, movesmade.i32).i32;

		ti6.i32 :=.i32 ti5.i32 +.i32 1.i32;

		moved.bool :=.bool 1.bool;

		goto endif2;

		moved.bool :=.bool 0.bool;

		goto endif1;

		moved.bool :=.bool 0.bool;

		goto endif0;

		moved.bool :=.bool 0.bool;

		tb7.bool :=.bool moved.bool;

		ret.bool tb7.bool;

		}

	.method public Move(row.i32,column.i32).bool {

		tb0.bool :=.bool $1.row.i32 <.i32 0.i32;

		tb1.bool :=.bool tb0.bool !.bool tb0.bool;

		tb2.bool :=.bool 0.i32 <.i32 $1.row.i32;

		ub3.bool :=.bool tb2.bool !.bool tb2.bool;

		if ( tb1.bool &&.bool ub3.bool ) goto bodyIf3;

		tb4.bool :=.bool $1.row.i32 <.i32 1.i32;

		tb5.bool :=.bool tb4.bool !.bool tb4.bool;

		tb6.bool :=.bool 1.i32 <.i32 $1.row.i32;

		ub7.bool :=.bool tb6.bool !.bool tb6.bool;

		if ( tb5.bool &&.bool ub7.bool ) goto bodyIf4;

		tb8.bool :=.bool $1.row.i32 <.i32 2.i32;

		tb9.bool :=.bool tb8.bool !.bool tb8.bool;

		tb10.bool :=.bool 2.i32 <.i32 $1.row.i32;

		ub11.bool :=.bool tb10.bool !.bool tb10.bool;

		if ( tb9.bool &&.bool ub11.bool ) goto bodyIf5;

		mov.bool :=.bool 0.bool;

		goto endif5;

		ti12.array.i32 :=.array.i32 getfield(this, row2.array.i32).array.i32;

		ti13.array.i32 :=.array.i32  invokevirtual (this,"MoveRow",ti12.array.i32,$2.column.i32).i32;

		tb14.bool :=.bool ti13.array.i32;

		mov.bool :=.bool tb14.bool;

		goto endif4;

		ti15.array.i32 :=.array.i32 getfield(this, row1.array.i32).array.i32;

		ti16.array.i32 :=.array.i32  invokevirtual (this,"MoveRow",ti15.array.i32,$2.column.i32).i32;

		tb17.bool :=.bool ti16.array.i32;

		mov.bool :=.bool tb17.bool;

		goto endif3;

		ti18.array.i32 :=.array.i32 getfield(this, row0.array.i32).array.i32;

		ti19.array.i32 :=.array.i32  invokevirtual (this,"MoveRow",ti18.array.i32,$2.column.i32).i32;

		tb20.bool :=.bool ti19.array.i32;

		mov.bool :=.bool tb20.bool;

		tb21.bool :=.bool mov.bool;

		ret.bool tb21.bool;

		}

	.method public inbounds(row.i32,column.i32).bool {

		if ( $1.row.i32 <.i32 0.i32 ) goto bodyIf6;

		if ( $2.column.i32 <.i32 0.i32 ) goto bodyIf7;

		if ( 2.i32 <.i32 $1.row.i32 ) goto bodyIf8;

		if ( 2.i32 <.i32 $2.column.i32 ) goto bodyIf9;

		in.bool :=.bool 1.bool;

		goto endif9;

		in.bool :=.bool 0.bool;

		goto endif8;

		in.bool :=.bool 0.bool;

		goto endif7;

		in.bool :=.bool 0.bool;

		goto endif6;

		in.bool :=.bool 0.bool;

		tb0.bool :=.bool in.bool;

		ret.bool tb0.bool;

		}

	.method public changeturn().bool {

		ti1.i32 :=.i32 getfield(this, whoseturn.i32).i32;

		ti1.i32 :=.i32 getfield(this, whoseturn.i32).i32;

		ti2.i32 :=.i32 1.i32 -.i32 ti1.i32;

		tb3.bool :=.bool 1.bool;

		ret.bool tb3.bool;

		}

	.method public getCurrentPlayer().i32 {

		ti0.i32 :=.i32 getfield(this, whoseturn.i32).i32;

		ti1.i32 :=.i32 ti0.i32 +.i32 1.i32;

		ret.i32 ti1.i32;

		}

	.method public winner().i32 {

		winner.i32 :=.i32 0.i32 -.i32 1.i32;

		array2.array.i32 :=.array.i32 new(array, 3.i32).array.i32;

		ti1.array.i32 :=.array.i32 getfield(this, row0.array.i32).array.i32;

		tb4.bool :=.bool invokestatic (BoardBase, "samearray2", ti1.array.i32).V;

		completearray2.bool :=.bool tb4.bool;

		ti6.array.i32 :=.array.i32 getfield(this, row1.array.i32).array.i32;

		tb9.bool :=.bool invokestatic (BoardBase, "samearray2", ti6.array.i32).V;

		completearray21.bool :=.bool tb9.bool;

		ti11.array.i32 :=.array.i32 getfield(this, row2.array.i32).array.i32;

		tb14.bool :=.bool invokestatic (BoardBase, "samearray2", ti11.array.i32).V;

		completearray22.bool :=.bool tb14.bool;

		ti15.i32 :=.i32 0.i32;

		ui16.i32 :=.i32 row0[ti15.i32].i32;

		ub17.bool :=.bool 0.i32 <.i32 ui16.i32;

		if ( completearray2.bool &&.bool ub17.bool ) goto bodyIf10;

		ti18.i32 :=.i32 0.i32;

		ui19.i32 :=.i32 row1[ti18.i32].i32;

		ub20.bool :=.bool 0.i32 <.i32 ui19.i32;

		if ( completearray21.bool &&.bool ub20.bool ) goto bodyIf11;

		ti21.i32 :=.i32 0.i32;

		ui22.i32 :=.i32 row2[ti21.i32].i32;

		ub23.bool :=.bool 0.i32 <.i32 ui22.i32;

		if ( completearray22.bool &&.bool ub23.bool ) goto bodyIf12;

		i.i32 :=.i32 0.i32;

		tb24.bool :=.bool winner.i32 <.i32 1.i32;

		ub25.bool :=.bool i.i32 <.i32 3.i32;

		if ( tb24.bool &&.bool ub25.bool) goto Body1;

		goto EndLoop1;

		ti26.i32:=.i32 0.i32;

		ti27.array.i32 :=.array.i32 row0[i.i32].i32;

		array2[ti26.i32].i32 :=.array.i32 ti27.array.i32;

		ti28.i32:=.i32 1.i32;

		ti29.array.i32 :=.array.i32 row1[i.i32].i32;

		array2[ti28.i32].i32 :=.array.i32 ti29.array.i32;

		ti30.i32:=.i32 2.i32;

		ti31.array.i32 :=.array.i32 row2[i.i32].i32;

		array2[ti30.i32].i32 :=.array.i32 ti31.array.i32;

		tb33.bool :=.bool invokestatic (BoardBase, "samearray2", array2.array.i32).V;

		completearray2.bool :=.bool tb33.bool;

		ti34.i32 :=.i32 0.i32;

		ui35.i32 :=.i32 array2[ti34.i32].i32;

		ub36.bool :=.bool 0.i32 <.i32 ui35.i32;

		if ( completearray2.bool &&.bool ub36.bool ) goto bodyIf13;

		goto endif13;

		ti37.i32 :=.i32 0.i32;

		ti38.i32 :=.i32 array2[ti37.i32].i32;

		winner.i32 :=.i32 ti38.i32;

		i.i32 :=.i32 i.i32 +.i32 1.i32;

		goto Loop1;

		if ( winner.i32 <.i32 1.i32 ) goto bodyIf14;

		goto endif14;

		ti39.i32:=.i32 0.i32;

		ti40.i32 :=.i32 0.i32;

		ti41.array.i32 :=.array.i32 row0[ti40.i32].i32;

		array2[ti39.i32].i32 :=.array.i32 ti41.array.i32;

		ti42.i32:=.i32 1.i32;

		ti43.i32 :=.i32 1.i32;

		ti44.array.i32 :=.array.i32 row1[ti43.i32].i32;

		array2[ti42.i32].i32 :=.array.i32 ti44.array.i32;

		ti45.i32:=.i32 2.i32;

		ti46.i32 :=.i32 2.i32;

		ti47.array.i32 :=.array.i32 row2[ti46.i32].i32;

		array2[ti45.i32].i32 :=.array.i32 ti47.array.i32;

		tb49.bool :=.bool invokestatic (BoardBase, "samearray2", array2.array.i32).V;

		completearray2.bool :=.bool tb49.bool;

		ti50.i32 :=.i32 0.i32;

		ui51.i32 :=.i32 array2[ti50.i32].i32;

		ub52.bool :=.bool 0.i32 <.i32 ui51.i32;

		if ( completearray2.bool &&.bool ub52.bool ) goto bodyIf15;

		ti53.i32:=.i32 0.i32;

		ti54.i32 :=.i32 2.i32;

		ti55.array.i32 :=.array.i32 row0[ti54.i32].i32;

		array2[ti53.i32].i32 :=.array.i32 ti55.array.i32;

		ti56.i32:=.i32 1.i32;

		ti57.i32 :=.i32 1.i32;

		ti58.array.i32 :=.array.i32 row1[ti57.i32].i32;

		array2[ti56.i32].i32 :=.array.i32 ti58.array.i32;

		ti59.i32:=.i32 2.i32;

		ti60.i32 :=.i32 0.i32;

		ti61.array.i32 :=.array.i32 row2[ti60.i32].i32;

		array2[ti59.i32].i32 :=.array.i32 ti61.array.i32;

		tb63.bool :=.bool invokestatic (BoardBase, "samearray2", array2.array.i32).V;

		completearray2.bool :=.bool tb63.bool;

		ti64.i32 :=.i32 0.i32;

		ui65.i32 :=.i32 array2[ti64.i32].i32;

		ub66.bool :=.bool 0.i32 <.i32 ui65.i32;

		if ( completearray2.bool &&.bool ub66.bool ) goto bodyIf16;

		goto endif16;

		ti67.i32 :=.i32 0.i32;

		ti68.i32 :=.i32 array2[ti67.i32].i32;

		winner.i32 :=.i32 ti68.i32;

		goto endif15;

		ti69.i32 :=.i32 0.i32;

		ti70.i32 :=.i32 array2[ti69.i32].i32;

		winner.i32 :=.i32 ti70.i32;

		goto endif12;

		ti71.i32 :=.i32 0.i32;

		ti72.i32 :=.i32 row2[ti71.i32].i32;

		winner.i32 :=.i32 ti72.i32;

		goto endif11;

		ti73.i32 :=.i32 0.i32;

		ti74.i32 :=.i32 row1[ti73.i32].i32;

		winner.i32 :=.i32 ti74.i32;

		goto endif10;

		ti75.i32 :=.i32 0.i32;

		ti76.i32 :=.i32 row0[ti75.i32].i32;

		winner.i32 :=.i32 ti76.i32;

		tb77.bool :=.bool winner.i32 <.i32 1.i32;

		ti78.i32 :=.i32 getfield(this, movesmade.i32).i32;

		tb79.bool :=.bool ti78.i32 <.i32 9.i32;

		ub80.bool :=.bool tb79.bool !.bool tb79.bool;

		tb81.bool :=.bool tb77.bool &&.bool ub80.bool;

		ti82.i32 :=.i32 getfield(this, movesmade.i32).i32;

		tb83.bool :=.bool 9.i32 <.i32 ti82.i32;

		ub84.bool :=.bool tb83.bool !.bool tb83.bool;

		if ( tb81.bool &&.bool ub84.bool ) goto bodyIf17;

		goto endif17;

		winner.i32 :=.i32 0.i32;

		ti85.i32 :=.i32 winner.i32;

		ret.i32 ti85.i32;

		}

	.method public static main(args.array.String).V {

		ti0.TicTacToe :=.TicTacToe new (TicTacToe).TicTacToe;

		invokespecial (ti0.TicTacToe,"<init>").V;

		mygame.TicTacToe :=.TicTacToe ti0.TicTacToe;

		invokevirtual (mygame.TicTacToe,"init").bool;

		ti1.i32 :=.i32 invokevirtual (mygame.TicTacToe,"winner").i32;

		ui2.i32 :=.i32 0.i32 -.i32 1.i32;

		tb3.bool :=.bool ti1.i32 <.i32 ui2.i32;

		tb4.bool :=.bool tb3.bool !.bool tb3.bool;

		ti5.i32 :=.i32 0.i32 -.i32 1.i32;

		ui6.i32 :=.i32 invokevirtual (mygame.TicTacToe,"winner").i32;

		tb7.bool :=.bool ti5.i32 <.i32 ui6.i32;

		ub8.bool :=.bool tb7.bool !.bool tb7.bool;

		if ( tb4.bool &&.bool ub8.bool) goto Body2;

		goto EndLoop2;

		done.bool :=.bool 0.bool;

		if ( done.bool !.bool done.bool) goto Body3;

		goto EndLoop3;

		ti10.i32 :=.i32 invokevirtual (mygame.TicTacToe,"getRow0").i32;

		ti11.i32 :=.i32 mygame[ti10.i32].TicTacToe;

		ti12.i32 :=.i32 invokevirtual (mygame.TicTacToe,"getRow1").i32;

		ti13.i32 :=.i32 mygame[ti12.i32].TicTacToe;

		ti14.i32 :=.i32 invokevirtual (mygame.TicTacToe,"getRow2").i32;

		ti15.i32 :=.i32 mygame[ti14.i32].TicTacToe;

		invokestatic (BoardBase, "printBoard", ti11.i32, ti13.i32, ti15.i32).V;

		ti16.i32 :=.i32 invokevirtual (mygame.TicTacToe,"getCurrentPlayer").i32;

		player.i32 :=.i32 ti16.i32;

		ti18.array.i32 :=.array.i32 invokestatic (BoardBase, "playerTurn", player.i32).V;

		move.array.i32 :=.array.i32 ti18.array.i32;

		ti20.i32 :=.i32 move[ti19.i32].i32;

		ti22.i32 :=.i32 move[ti21.i32].i32;

		tb23.bool :=.bool ti19.i32 :=.i32 0.i32;

		ti21.i32 :=.i32 1.i32;

		invokevirtual (mygame.TicTacToe,"inbounds", ti20.i32, ti22.i32).i32;

		if ( tb23.bool !.bool tb23.bool ) goto bodyIf18;

		ti25.i32 :=.i32 move[ti24.i32].i32;

		ti27.i32 :=.i32 move[ti26.i32].i32;

		tb28.bool :=.bool ti24.i32 :=.i32 0.i32;

		ti26.i32 :=.i32 1.i32;

		invokevirtual (mygame.TicTacToe,"Move", ti25.i32, ti27.i32).i32;

		if ( tb28.bool !.bool tb28.bool ) goto bodyIf19;

		done.bool :=.bool 1.bool;

		goto endif19;

		invokestatic (BoardBase, "placeTaken").V;

		goto endif18;

		invokestatic (BoardBase, "wrongMove").V;

		goto Loop3;

		invokevirtual (mygame.TicTacToe,"changeturn").bool;

		goto Loop2;

		ti32.i32 :=.i32 invokevirtual (mygame.TicTacToe,"getRow0").i32;

		ti33.i32 :=.i32 mygame[ti32.i32].TicTacToe;

		ti34.i32 :=.i32 invokevirtual (mygame.TicTacToe,"getRow1").i32;

		ti35.i32 :=.i32 mygame[ti34.i32].TicTacToe;

		ti36.i32 :=.i32 invokevirtual (mygame.TicTacToe,"getRow2").i32;

		ti37.i32 :=.i32 mygame[ti36.i32].TicTacToe;

		invokestatic (BoardBase, "printBoard", ti33.i32, ti35.i32, ti37.i32).V;

		ti38.i32 :=.i32 invokevirtual (mygame.TicTacToe,"winner").i32;

		win.i32 :=.i32 ti38.i32;

		invokestatic (BoardBase, "printWinner", win.i32).V;

		}

	}

